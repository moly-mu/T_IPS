// Comentarios de tareas pendientes:
// * Hashear contraseñas
// * Agregar campos de consentimiento de la persona
// * Agregar tabla receta medica
// * Agregar tabla de ordenes médicas
// * Agregar tabla cuestionario de sintomas 
// * Agregar tabla de comprobante de cita
// * Agregar tabla de facturas

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       Int    @id @default(autoincrement()) @map("idadmin")
  username String @unique @db.VarChar(45)
  password String @db.VarChar(100)

  @@map("admin")
}

model CredentialUser {
  id       Int    @id @default(autoincrement()) @map("idcredential_users")
  document Int    @unique
  email    String @unique @db.VarChar(100)
  password String @db.VarChar(100)
  User     User[]

  @@map("credential_users")
}

model Rol {
  id       Int    @id @default(autoincrement()) @map("idrol")
  rol_name String @unique @db.VarChar(45)
  User     User[]

  @@map("rol")
}

// Usuario base - puede ser paciente o especialista según el rol
//* Añadir fecha de nacimiento 
model User {
  id                                  Int        @id @default(autoincrement()) @map("idUser")
  firstname                           String     @db.VarChar(45)
  second_firstname                    String?    @db.VarChar(45)
  lastname                            String     @db.VarChar(45)
  second_lastname                     String?    @db.VarChar(45)
  birthdate                           DateTime   
  gender                              Gender
  sex                                 Sex
  language                            Language
  document_type                       DocumentType
  phone                               String     @default("0000000000") @db.VarChar(20)
  credential_users_idcredential_users Int
  rol_idrol                           Int        @default(1)
  status                              UserStatus @default(Pendiente)
  joinDate                            DateTime   @default(now()) @db.Timestamp(0)
  
  credential_users    CredentialUser      @relation(fields: [credential_users_idcredential_users], references: [id])
  rol                 Rol                 @relation(fields: [rol_idrol], references: [id])
  Paciente            Patient[]
  Especialista        Specialist[]
  userReviewsGiven    UserReview[]        @relation("UserReviewReviewer")
  userReviewsReceived UserReview[]        @relation("UserReviewReviewed")
  specialistRequests  SpecialistRequest[] @relation("UserToSpecialistRequests")
  calendarEvents      CalendarEvent[]

  @@unique([id, credential_users_idcredential_users, rol_idrol])
  @@map("user")
}

model PacData {
  id                Int       @id @default(autoincrement()) @map("idpac_data")
  medical_history   Bytes
  Direction         String    @db.VarChar(100)
  bloodType         BloodType
  allergies         String?   @db.Text
  emergency_contact String?   @db.VarChar(100)
  Patient           Patient[]
  eps_type          Eps @default(Ninguna)
  profession        String? @db.VarChar(45)
  ethnicgroup       String? @db.VarChar(45)
  @@map("pac_data")
}

model Patient {
  id                                       Int @id @default(autoincrement()) @map("idpaciente")
  pac_data_idpac_data                      Int
  User_idUser                              Int
  User_credential_users_idcredential_users Int
  User_rol_idrol                           Int

  pac_data           PacData              @relation(fields: [pac_data_idpac_data], references: [id])
  User               User                 @relation(fields: [User_idUser, User_credential_users_idcredential_users, User_rol_idrol], references: [id, credential_users_idcredential_users, rol_idrol])
  Appointments       Appointment[]
  MedicalHistories   MedicalHistory[]
  AppointmentReceipt AppointmentReceipt[]
  Consents           Consent[]
  Invoices           Invoice[]
  MedicalOrders      MedicalOrder[]

  @@unique([id, pac_data_idpac_data, User_idUser, User_credential_users_idcredential_users, User_rol_idrol])
  @@map("paciente")
}

model SpecData {
  id                       Int      @id @default(autoincrement()) @map("idspec_data")
  biography                String   @db.Text
  picture                  Bytes
  cv                       Bytes    @map("CV")
  exp_lab                  String   @db.VarChar(45)
  educational_certificates Bytes    @map("educational_certificates")
  degrees                  Bytes
  working_experience       String   @db.VarChar(45)
  consultations            Int      @default(0)
  joinDate                 DateTime @default(now()) @db.Timestamp(6)
  workStartSchedule        DateTime @db.Timestamp(0) @default (now())
  workEndSchedule          DateTime @db.Timestamp(0) @default (now())
  Specialist Specialist[]

  @@map("spec_data")
}

model Specialist {
  id                                       Int @default(autoincrement()) @map("idEspecialista")
  spec_data_idspec_data                    Int
  User_idUser                              Int
  User_credential_users_idcredential_users Int
  User_rol_idrol                           Int
  

  Status                 UserStatus[]
  spec_data              SpecData                 @relation(fields: [spec_data_idspec_data], references: [id])
  User                   User                     @relation(fields: [User_idUser, User_credential_users_idcredential_users, User_rol_idrol], references: [id, credential_users_idcredential_users, rol_idrol])
  SpecialistHasSpecialty SpecialistHasSpecialty[]
  Request                Request[]
  Appointments           Appointment[]            @relation("AppointmentToSpecialist")
  MedicalOrders          MedicalOrder[]

  @@id([id, spec_data_idspec_data, User_idUser, User_credential_users_idcredential_users, User_rol_idrol])
  @@unique([id])
  @@map("especialista")
}

model Specialty {
  id                     Int                      @id @default(autoincrement()) @map("idspecialty")
  name                   String                   @unique @db.VarChar(45)
  status                 SpecialtyStatus          @default(Inactivo)
  price                  Int                      @default(0)
  service                String                   @db.VarChar(45)
  duration               Int                      @default(30) // duración promedio en minutos
  joinDate               DateTime                 @default(now()) @db.Timestamp(0)
  SpecialistHasSpecialty SpecialistHasSpecialty[]
  Appointment            Appointment[]
  Consents               Consent[]        

  @@map("specialty")
}

model SpecialistHasSpecialty {
  Specialist_idEspecialista                           Int
  Specialist_spec_data_idspec_data                    Int
  Specialist_User_idUser                              Int
  Specialist_User_credential_users_idcredential_users Int
  Specialist_User_rol_idrol                           Int
  specialty_idspecialty                               Int

  Specialist Specialist @relation(fields: [Specialist_idEspecialista, Specialist_spec_data_idspec_data, Specialist_User_idUser, Specialist_User_credential_users_idcredential_users, Specialist_User_rol_idrol], references: [id, spec_data_idspec_data, User_idUser, User_credential_users_idcredential_users, User_rol_idrol])
  Specialty  Specialty  @relation(fields: [specialty_idspecialty], references: [id])

  @@id([Specialist_idEspecialista, Specialist_spec_data_idspec_data, Specialist_User_idUser, Specialist_User_credential_users_idcredential_users, Specialist_User_rol_idrol, specialty_idspecialty])
  @@map("especialista_has_specialty")
}

model Request {
  id                                                  Int @default(autoincrement()) @map("idrequest")
  Specialist_idEspecialista                           Int
  Specialist_spec_data_idspec_data                    Int
  Specialist_User_idUser                              Int
  Specialist_User_credential_users_idcredential_users Int
  Specialist_User_rol_idrol                           Int

  Specialist Specialist @relation(fields: [Specialist_idEspecialista, Specialist_spec_data_idspec_data, Specialist_User_idUser, Specialist_User_credential_users_idcredential_users, Specialist_User_rol_idrol], references: [id, spec_data_idspec_data, User_idUser, User_credential_users_idcredential_users, User_rol_idrol])

  @@id([id, Specialist_idEspecialista, Specialist_spec_data_idspec_data, Specialist_User_idUser, Specialist_User_credential_users_idcredential_users, Specialist_User_rol_idrol])
  @@map("request")
}

model Appointment {
  id                                                  Int      @id @default(autoincrement()) @map("idappointments")
  state                                               String   @db.VarChar(20)
  appoint_specialtyId                                 Int
  Paciente_idPaciente                                 Int
  Paciente_pac_data_idpac_data                        Int
  Paciente_User_idUser                                Int
  Paciente_User_credential_users_idcredential_users   Int      @map("Paciente_User_credential_users_idcredential_users")
  Paciente_User_rol_idrol                             Int
  Specialist_idEspecialista                           Int
  Specialist_spec_data_idspec_data                    Int
  Specialist_User_idUser                              Int
  Specialist_User_credential_users_idcredential_users Int      @map("Specialist_User_credential_users_idcredential_users")
  Specialist_User_rol_idrol                           Int
  appoint_init                                        DateTime @db.Timestamp
  appoint_finish                                      DateTime @db.Timestamp
  linkZoom                                            String?  @db.VarChar(100)

  Paciente           Patient              @relation(fields: [Paciente_idPaciente, Paciente_pac_data_idpac_data, Paciente_User_idUser, Paciente_User_credential_users_idcredential_users, Paciente_User_rol_idrol], references: [id, pac_data_idpac_data, User_idUser, User_credential_users_idcredential_users, User_rol_idrol])
  Specialist         Specialist           @relation(name: "AppointmentToSpecialist", fields: [Specialist_idEspecialista, Specialist_spec_data_idspec_data, Specialist_User_idUser, Specialist_User_credential_users_idcredential_users, Specialist_User_rol_idrol], references: [id, spec_data_idspec_data, User_idUser, User_credential_users_idcredential_users, User_rol_idrol])
  Specialty          Specialty            @relation(fields: [appoint_specialtyId], references: [id])
  Invoice            Invoice[]
  MedicalOrder       MedicalOrder[]
  AppointmentReceipt AppointmentReceipt[]

  @@map("appointments")
}

model UserReview {
  id               Int      @id @default(autoincrement()) @map("iduser_review")
  reviewer_id      Int
  reviewer_cred_id Int
  reviewer_rol_id  Int
  reviewed_id      Int
  reviewed_cred_id Int
  reviewed_rol_id  Int
  rating           Float
  comment          String?  @db.Text
  createdAt        DateTime @default(now()) @db.Timestamp(6)

  reviewer User @relation("UserReviewReviewer", fields: [reviewer_id, reviewer_cred_id, reviewer_rol_id], references: [id, credential_users_idcredential_users, rol_idrol])
  reviewed User @relation("UserReviewReviewed", fields: [reviewed_id, reviewed_cred_id, reviewed_rol_id], references: [id, credential_users_idcredential_users, rol_idrol])

  @@unique([reviewer_id, reviewer_cred_id, reviewer_rol_id, reviewed_id, reviewed_cred_id, reviewed_rol_id])
  @@map("user_review")
}



model SpecialistRequest {
  id             Int      @id @default(autoincrement())
  userId         Int
  biography      String?
  picture        Bytes?
  specialty      String?
  price          Float
  graduationYear Int
  workExperience String?
  language       Language
  education      String?
  skills         String?
  references     String? // JSON string
  certificates   Bytes?
  documentInfo   String? // JSON string
  personalInfo   String? // JSON string
  personalRefs   String? // JSON string

  status         UserStatus @default(Pendiente)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation("UserToSpecialistRequests", fields: [userId], references: [id])

  @@map("specialist_request")
}

// Tabla de historia clinica - apunta a Patient
model MedicalHistory {
  id                                   Int    @id @default(autoincrement()) @map("idhistoria_medica")
  patient_idPaciente                   Int
  patient_pac_data_idpac_data          Int
  patient_User_idUser                  Int
  patient_User_credential_users_idcred Int
  patient_User_rol_idrol               Int
  email                                String @db.VarChar(100)
  emergency_contact                    String @db.VarChar(100)
  contact_phone                        String @db.VarChar(20)

  consultations   MedicalConsultation[]
  diagnoses       Diagnosis[]
  antecedents     MedicalBackground[]
  prescriptions   Prescription[]
  diagnosticFiles DiagnosticFile[]

  Patient Patient @relation(fields: [patient_idPaciente, patient_pac_data_idpac_data, patient_User_idUser, patient_User_credential_users_idcred, patient_User_rol_idrol], references: [id, pac_data_idpac_data, User_idUser, User_credential_users_idcredential_users, User_rol_idrol])

  @@map("historia_medica")
}

model MedicalConsultation {
  id               Int      @id @default(autoincrement()) @map("idconsulta_medica")
  medicalHistoryId Int
  startTime        DateTime @db.Timestamp
  endTime          DateTime @db.Timestamp
  reason           String   @db.Text
  medicalNote      String   @db.Text
  vitalSigns       String?  @db.Text
  consultationMode String   @db.VarChar(45)
  location         String   @db.VarChar(100)
  summary          String?  @db.Text

  medicalHistory MedicalHistory @relation(fields: [medicalHistoryId], references: [id])

  @@map("consulta_medica")
}

model Diagnosis {
  id               Int      @id @default(autoincrement()) @map("iddiagnostico")
  medicalHistoryId Int
  cie10Code        String   @db.VarChar(20)
  symptomDesc      String   @db.Text
  duration         String   @db.VarChar(45)
  evolution        String   @db.Text
  diagnosisType    String   @db.VarChar(20)
  isPrincipal      Boolean  @default(false)
  diagnosisDate    DateTime @db.Timestamp

  medicalHistory MedicalHistory @relation(fields: [medicalHistoryId], references: [id])

  @@map("diagnostico")
}

model MedicalBackground {
  id               Int    @id @default(autoincrement()) @map("idantecedente")
  medicalHistoryId Int
  type             String @db.VarChar(45)
  description      String @db.Text

  medicalHistory MedicalHistory @relation(fields: [medicalHistoryId], references: [id])

  @@map("antecedente_medico")
}

model DiagnosticFile {
  id               Int      @id @default(autoincrement()) @map("idarchivo_diagnostico")
  medicalHistoryId Int
  fileName         String   @db.VarChar(100)
  fileType         String   @db.VarChar(20)
  file             Bytes
  studyDate        DateTime @db.Timestamp
  specialty        String   @db.VarChar(45)
  status           String   @db.VarChar(20)

  medicalHistory MedicalHistory @relation(fields: [medicalHistoryId], references: [id])

  @@map("archivo_diagnostico")
}

model Prescription {
  id               Int      @id @default(autoincrement()) @map("idreceta")
  medicalHistoryId Int
  medicine         String   @db.VarChar(100)
  dosage           String   @db.VarChar(100)
  frequency        String   @db.VarChar(100)
  duration         String   @db.VarChar(100)
  indications      String   @db.Text
  issuedAt         DateTime @db.Timestamp
  sentBy           String   @db.VarChar(20)

  medicalHistory MedicalHistory @relation(fields: [medicalHistoryId], references: [id])

  @@map("receta")
}

// Consent apunta a Patient y Specialty
model Consent {
  id                                   Int      @id @default(autoincrement()) @map("idconsentimiento")
  patient_idPaciente                   Int
  patient_pac_data_idpac_data          Int
  patient_User_idUser                  Int
  patient_User_credential_users_idcred Int
  patient_User_rol_idrol               Int
  especialidad_id                      Int
  fecha_firma                          DateTime @db.Date
  firmado_por                          String   @db.VarChar(255)
  relacion_con_paciente                String   @db.VarChar(100)
  documento_identidad                  String   @db.VarChar(50)
  consentimiento_texto                 String   @db.Text
  firmado                              Boolean
  firma_digital                        Bytes?
  observaciones                        String?  @db.Text
  fecha_creacion                       DateTime @default(now())
  fecha_actualizacion                  DateTime @updatedAt

  Patient   Patient   @relation(fields: [patient_idPaciente, patient_pac_data_idpac_data, patient_User_idUser, patient_User_credential_users_idcred, patient_User_rol_idrol], references: [id, pac_data_idpac_data, User_idUser, User_credential_users_idcredential_users, User_rol_idrol])
  Specialty Specialty @relation(fields: [especialidad_id], references: [id])

  @@map("consentimiento")
}

// Invoice apunta a Patient
model Invoice {
  id                                   Int       @id @default(autoincrement()) @map("idfactura")
  appointmentId                        Int
  patient_idPaciente                   Int
  patient_pac_data_idpac_data          Int
  patient_User_idUser                  Int
  patient_User_credential_users_idcred Int
  patient_User_rol_idrol               Int
  amount                               Float
  paymentMethod                        String    @db.VarChar(45)
  paymentStatus                        String    @default("pendiente") @db.VarChar(45)
  issuedDate                           DateTime  @default(now()) @db.Timestamp(0)
  paidDate                             DateTime?

  Appointment Appointment @relation(fields: [appointmentId], references: [id])
  Patient     Patient     @relation(fields: [patient_idPaciente, patient_pac_data_idpac_data, patient_User_idUser, patient_User_credential_users_idcred, patient_User_rol_idrol], references: [id, pac_data_idpac_data, User_idUser, User_credential_users_idcredential_users, User_rol_idrol])

  @@map("factura")
}

// AppointmentReceipt apunta a Patient
model AppointmentReceipt {
  id                                   Int      @id @default(autoincrement()) @map("idcomprobante")
  appointmentId                        Int
  patient_idPaciente                   Int
  patient_pac_data_idpac_data          Int
  patient_User_idUser                  Int
  patient_User_credential_users_idcred Int
  patient_User_rol_idrol               Int
  issuedAt                             DateTime @default(now()) @db.Timestamp
  receiptUrl                           String   @db.VarChar(255)
  notes                                String?  @db.Text

  Appointment Appointment @relation(fields: [appointmentId], references: [id])
  Patient     Patient     @relation(fields: [patient_idPaciente, patient_pac_data_idpac_data, patient_User_idUser, patient_User_credential_users_idcred, patient_User_rol_idrol], references: [id, pac_data_idpac_data, User_idUser, User_credential_users_idcredential_users, User_rol_idrol])

  @@map("comprobante_cita")
}

// MedicalOrder apunta a Specialist y Patient
model MedicalOrder {
  id                                      Int      @id @default(autoincrement()) @map("idorden_medica")
  appointmentId                           Int
  specialist_idEspecialista               Int
  specialist_spec_data_idspec_data        Int
  specialist_User_idUser                  Int
  specialist_User_credential_users_idcred Int
  specialist_User_rol_idrol               Int
  patient_idPaciente                      Int
  patient_pac_data_idpac_data             Int
  patient_User_idUser                     Int
  patient_User_credential_users_idcred    Int
  patient_User_rol_idrol                  Int
  issuedAt                                DateTime @default(now()) @db.Timestamp
  description                             String   @db.Text
  instructions                            String?  @db.Text
  status                                  UserStatus  @default(Pendiente) 

  Appointment Appointment @relation(fields: [appointmentId], references: [id])
  Specialist  Specialist  @relation(fields: [specialist_idEspecialista, specialist_spec_data_idspec_data, specialist_User_idUser, specialist_User_credential_users_idcred, specialist_User_rol_idrol], references: [id, spec_data_idspec_data, User_idUser, User_credential_users_idcredential_users, User_rol_idrol])
  Patient     Patient     @relation(fields: [patient_idPaciente, patient_pac_data_idpac_data, patient_User_idUser, patient_User_credential_users_idcred, patient_User_rol_idrol], references: [id, pac_data_idpac_data, User_idUser, User_credential_users_idcredential_users, User_rol_idrol])

  @@map("orden_medica")
}

enum SpecialtyStatus {
  Activo
  Inactivo
}

enum UserStatus {
  Activo
  Inactivo
  Pendiente
}
enum Sex{ 
  Masculino
  Femenino
}
enum BloodType {
  A_POS  @map("A+")
  A_NEG  @map("A-")
  B_POS  @map("B+")
  B_NEG  @map("B-")
  AB_POS @map("AB+")
  AB_NEG @map("AB-")
  O_POS  @map("O+")
  O_NEG  @map("O-")
}
enum Gender {
  Masculino
  Femenino
  Otro
}

enum Language {
  Espanol   @map("Español")
  Ingles    @map("Inglés")
  Frances   @map("Francés")
  Aleman    @map("Alemán")
  Portugues @map("Portugués")
}

enum DocumentType {
  CC   // Colombianos mayores de edad
  TI   // Colombianos menores de edad
  CE   // Extranjeros residentes legalmente
  PPT  // Migrantes venezolanos
  RC   // Para menores de 7 años
  PAS  // Extranjeros no residentes o uso internacional
}

enum Eps {
  Sura
  Sanitas
  Compensar
  Famisanar
  SaludTotal
  NuevaEps
  Coosalud
  MutualSer
  Otra
  Ninguna
}

// Tabla para eventos personalizados del calendario
model CalendarEvent {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String?  @db.Text
  date        DateTime @db.Date
  time        String   @db.VarChar(10)
  color       String   @default("#3B82F6") @db.VarChar(7)
  type        String   @default("personal") @db.VarChar(50)
  userId      Int
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @updatedAt @db.Timestamp(0)

  User User @relation(fields: [userId], references: [id])

  @@map("calendar_events")
}
